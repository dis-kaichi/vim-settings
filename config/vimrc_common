" All system-wide defaults are set in $VIMRUNTIME/debian.vim (usually just
" /usr/share/vim/vimcurrent/debian.vim) and sourced by the call to :runtime
" you can find below.  If you wish to change any of those settings, you should
" do it in this file (/etc/vim/vimrc), since debian.vim will be overwritten
" everytime an upgrade of the vim packages is performed.  It is recommended to
" make changes after sourcing debian.vim since it alters the value of the
" 'compatible' option.

" This line should not be removed as it ensures that various options are
" properly set to work with the Vim-related packages available in Debian.
runtime! debian.vim

" Uncomment the next line to make Vim more Vi-compatible
" NOTE: debian.vim sets 'nocompatible'.  Setting 'compatible' changes numerous
" options, so any other options should be set AFTER setting 'compatible'.
"set compatible
set nocompatible

" Vim5 and later versions support syntax highlighting. Uncommenting the next
" line enables syntax highlighting by default.
if has("syntax")
  syntax on
endif

" If using a dark background within the editing area and syntax highlighting
" turn on this option as well
"set background=dark

" Uncomment the following to have Vim jump to the last position when
" reopening a file
if has("autocmd")
  au BufReadPost * if line("'\"") > 1 && line("'\"") <= line("$") | exe "normal! g'\"" | endif
endif

" Uncomment the following to have Vim load indentation rules and plugins
" according to the detected filetype.
if has("autocmd")
  filetype plugin indent on
endif

" The following are commented out as they cause vim to behave a lot
" differently from regular Vi. They are highly recommended though.
set showcmd		" Show (partial) command in status line.
set showmatch		" Show matching brackets.
set ignorecase		" Do case insensitive matching
set smartcase		" Do smart case matching
set incsearch		" Incremental search
set autowrite		" Automatically save before commands like :next and :make
"set hidden             " Hide buffers when they are abandoned
set mouse=a		" Enable mouse usage (all modes)

" Source a global configuration file if available
if filereadable("/etc/vim/vimrc.local")
  source /etc/vim/vimrc.local
endif

" ----------------------------------------
"  以下独自設定
" ----------------------------------------
" [参考] http://lambdalisue.hatenablog.com/entry/2013/06/23/071344

" 入力モード中に素早くjjと入力した場合はESCとみなす
inoremap jj <Esc>

" 先頭まで削除が発生するとロスなので、上書きしておく
inoremap <C-u> <Esc>

" ----------------------------------------
" 検索/編集/置換関連
" ----------------------------------------
""" 検索
set ignorecase          " 大文字小文字を区別しない
set smartcase           " 検索文字に大文字がある場合は大文字小文字を区別
set incsearch           " インクリメンタルサーチ
set hlsearch            " 検索マッチテキストをハイライト (2013-07-03 14:30 修正）
set iskeyword+=-        " 補完検索でハイフンつなぎの文字も許可する
" カーソル下の単語を * で検索
vnoremap <silent> * "vy/\V<C-r>=substitute(escape(@v, '\/'), "\n", '\\n', 'g')<CR><CR>

" 検索後にジャンプした際に検索単語を画面中央に持ってくる
nnoremap n nzz
nnoremap N Nzz
nnoremap * *zz
nnoremap # #zz
nnoremap g* g*zz
nnoremap g# g#zz

" j, k による移動を折り返されたテキストでも自然に振る舞うように変更
nnoremap j gj
nnoremap k gk

" vを二回で行末まで選択
vnoremap v $h

" TABにて対応ペアにジャンプ
" nnoremap <Tab> %
" vnoremap <Tab> %

""" vimgrep
" [参考] http://qiita.com/yuku_t/items/0c1aff03949cb1b8fe6b
nnoremap fp :cprevious<CR>
nnoremap fn :cnext<CR>
nnoremap fS :<C-u>cfirst<CR>
nnoremap fL :<C-u>clast<CR>
"nnoremap <expr> f* ':vimgrep /\<' . expand('<cword>') . '\>/ '
nnoremap <expr> f* ':vimgrep /\<' . expand('<cword>') . '\>/  ../**/*'

" QuickFix
autocmd QuickFixCmdPost *grep* cwindow

" ESCを二回押すことでハイライトを消す
nmap <silent> <Esc><Esc> :nohlsearch<CR>

" 置換機能
nnoremap <expr> s* ':%substitute/\<' . expand('<cword>') . '\>/'

" バックスラッシュやクエスチョンを状況に合わせ自動的にエスケープ
cnoremap <expr> / getcmdtype() == '/' ? '\/' : '/'
cnoremap <expr> ? getcmdtype() == '?' ? '\?' : '?'

""" 編集関連
set shiftround          " '<'や'>'でインデントする際に'shiftwidth'の倍数に丸める
set infercase           " 補完時に大文字小文字を区別しない
set virtualedit=all     " カーソルを文字が存在しない部分でも動けるようにする
set hidden              " バッファを閉じる代わりに隠す（Undo履歴を残すため）
set switchbuf=useopen   " 新しく開く代わりにすでに開いてあるバッファを開く
set showmatch           " 対応する括弧などをハイライト表示する
set matchtime=3         " 対応括弧のハイライト表示を3秒にする
" 対応括弧に'<'と'>'のペアを追加
set matchpairs& matchpairs+=<:>

" バックスペースでなんでも消せるようにする
set backspace=indent,eol,start

" クリップボードをデフォルトのレジスタとして指定。後にYankRingを使うので
" 'unnamedplus'が存在しているかどうかで設定を分ける必要がある
if has('unnamedplus')
    set clipboard& clipboard+=unnamedplus,unnamed 
else
    set clipboard& clipboard+=unnamed
endif

""" 表示関連
set list                " 不可視文字の可視化
set number              " 行番号の表示
set wrap                " 長いテキストの折り返し
set textwidth=0         " 自動的に改行が入るのを無効化
"set colorcolumn=80      " その代わり80文字目にラインを入れる
set tabstop=2           " タブ文字の見た目の幅
set shiftwidth=2        " 挿入されるインデントの幅
set expandtab           " タブを空白にする

" 前時代的スクリーンベルを無効化
set t_vb=
set novisualbell

" デフォルト不可視文字は美しくないのでUnicodeで綺麗に
set listchars=tab:»-,trail:-,extends:»,precedes:«,nbsp:%,eol:↲

" 記号の表示が崩れる問題
set ambiwidth=double

" ----------------------------------------
"  Window関連
" ----------------------------------------
" Shift + 矢印でウィンドウサイズを変更
nnoremap <S-Left>  <C-w><<CR>
nnoremap <S-Right> <C-w>><CR>
nnoremap <S-Up>    <C-w>-<CR>
nnoremap <S-Down>  <C-w>+<CR>

" Ctrl + hjkl でウィンドウ間を移動
nnoremap <C-h> <C-w>h
nnoremap <C-j> <C-w>j
nnoremap <C-k> <C-w>k
nnoremap <C-l> <C-w>l

" ----------------------------------------
" タブ機能追加
" ----------------------------------------
" Anywhere SID.
function! s:SID_PREFIX()
  return matchstr(expand('<sfile>'), '<SNR>\d\+_\zeSID_PREFIX$')
endfunction

" Set tabline.
function! s:my_tabline()  "{{{
  let s = ''
  for i in range(1, tabpagenr('$'))
    let bufnrs = tabpagebuflist(i)
    let bufnr = bufnrs[tabpagewinnr(i) - 1]  " first window, first appears
    let no = i  " display 0-origin tabpagenr.
    let mod = getbufvar(bufnr, '&modified') ? '!' : ' '
    let title = fnamemodify(bufname(bufnr), ':t')
    let title = '[' . title . ']'
    let s .= '%'.i.'T'
    let s .= '%#' . (i == tabpagenr() ? 'TabLineSel' : 'TabLine') . '#'
    let s .= no . ':' . title
    let s .= mod
    let s .= '%#TabLineFill# '
  endfor
  let s .= '%#TabLineFill#%T%=%#TabLine#'
  return s
endfunction "}}}
let &tabline = '%!'. s:SID_PREFIX() . 'my_tabline()'
set showtabline=2 " 常にタブラインを表示

" The prefix key.
nnoremap    [Tag]   <Nop>
nmap    t [Tag]
" Tab jump
for n in range(1, 9)
  execute 'nnoremap <silent> [Tag]'.n  ':<C-u>tabnext'.n.'<CR>'
endfor
" t1 で1番左のタブ、t2 で1番左から2番目のタブにジャンプ

" tc 新しいタブを一番右に作る
map <silent> [Tag]c :tablast <bar> tabnew<CR>
" tx タブを閉じる
map <silent> [Tag]x :tabclose<CR>
" tn 次のタブ
map <silent> [Tag]n :tabnext<CR>
" tp 前のタブ
map <silent> [Tag]p :tabprevious<CR>

" ----------------------------------------
" vim-operator-surround key bindings
" ----------------------------------------
" operator mappings
map <silent>sa <Plug>(operator-surround-append)
map <silent>sd <Plug>(operator-surround-delete)
map <silent>sr <Plug>(operator-surround-replace)

" delete or replace most inner surround

" if you use vim-textobj-multiblock
nmap <silent>sdd <Plug>(operator-surround-delete)<Plug>(textobj-multiblock-a)
nmap <silent>srr <Plug>(operator-surround-replace)<Plug>(textobj-multiblock-a)

" if you use vim-textobj-anyblock
nmap <silent>sdd <Plug>(operator-surround-delete)<Plug>(textobj-anyblock-a)
nmap <silent>srr <Plug>(operator-surround-replace)<Plug>(textobj-anyblock-a)

" if you use vim-textobj-between
nmap <silent>sdb <Plug>(operator-surround-delete)<Plug>(textobj-between-a)
nmap <silent>srb <Plug>(operator-surround-replace)<Plug>(textobj-between-a)

" ----------------------------------------
" vim yank shared
" ----------------------------------------
map <silent>sy :call YanktmpYank()<CR>
map <silent>sp :call YanktmpPaste_p()<CR>
map <silent>sP :call YanktmpPaste_P()<CR>

" ----------------------------------------
"  Buffers
" ----------------------------------------
map <silent> <C-n> :bnext<CR>
map <silent> <C-p> :bprevious<CR>
map <silent> <C-q> :bdelete<CR>

" ----------------------------------------
"  その他
" ----------------------------------------
" Emacsの設定ファイル編集用
set lisp
let lisp_rainbow = 1

" デザイン
set background=dark

" オリジナルコマンド群(共通)
nnoremap [Exec] <Nop>
nmap <C-t> [Exec]
map <silent> [Exec]now :<ESC>i<C-r>=strftime("%Y/%m/%d(%a) %H:%M:%S")<CR><ESC>

" 自動畳み込みOFF
set nofoldenable

" Copy to Clipboard
"vnoremap <silent>y :w !xsel -bi<CR><CR>

" ----------------------------------------
" START Neobundle Settings.
" ----------------------------------------
"" 参考 : http://catcher-in-the-tech.net/1063/
" bundleで管理するディレクトリ
set runtimepath+=~/.vim/bundle/neobundle.vim/

" Required:
call neobundle#begin(expand('~/.vim/bundle/'))

" neobundle自体をneobundleで管理
NeoBundleFetch 'Shougo/neobundle.vim'
NeoBundle 'Shougo/vimproc.vim'

"" TODO ココらへんにプラグインを追加
""" テーブル整形用
NeoBundle 'h1mesuke/vim-alignta'

""" W3M
"NeoBundle 'yuratomo/w3m.vim'

""" vim operator srround
NeoBundle 'kana/vim-operator-user'
"NeoBundle 'rhysd/vim-operator-surround'
""" vim surround
NeoBundle 'tpope/vim-surround'

""" HatenaBlog
"""" 後で移動する
"NeoBundle 'moznion/hateblo.vim'
"NeoBundle 'mattn/webapi-vim'
"NeoBundle 'Shougo/unite.vim'
"NeoBundle 'kana/vim-metarw'
""NeoBundle 'quickrun.vim'

""" vim yank結果共有
NeoBundle 'rtakasuke/yanktmp.vim'

""" Comment Out
"NeoBundle 'sakuraiyuta/commentout.vim'
NeoBundle 'tomtom/tcomment_vim'

""" C#
"NeoBundle 'OrangeT/vim-csharp'

"" Evernote
"NeoBundle 'kakkyz81/evervim'

if language == 'python'
  NeoBundle 'hynek/vim-python-pep8-indent'
  NeoBundle 'tell-k/vim-autopep8'
elseif language ==  'lisp'
  " lisp with roswell
  NeoBundle 'kien/rainbow_parentheses.vim'
elseif language == 'hylang'
  NeoBundle 'kien/rainbow_parentheses.vim'
elseif language ==  'clisp'
  NeoBundle 'kovisoft/slimv'
  NeoBundle 'kien/rainbow_parentheses.vim'
elseif language == 'clojure'
  NeoBundle 'guns/vim-clojure-static'
  NeoBundle 'kien/rainbow_parentheses.vim'
  NeoBundle 'tpope/vim-fireplace'
  NeoBundle 'tpope/vim-classpath'
elseif language == 'coq'
  NeoBundle 'eagletmt/coqtop-vim'
elseif language == 'cpp'
  NeoBundle 'rhysd/vim-clang-format'
elseif language == 'frege'
  NeoBundle 'melrief/vim-frege-syntax'
elseif language == 'fsharp'
  NeoBundle 'kongo2002/fsharp-vim'
  NeoBundle 'thinca/vim-quickrun'
elseif language == 'haskell'
  NeoBundle 'dag/vim2hs'
  NeoBundle 'eagletmt/ghcmod-vim'
  NeoBundle 'pbrisbin/vim-syntax-shakespeare'
  NeoBundle 'eagletmt/neco-ghc'
  NeoBundle 'eagletmt/unite-haddock'
elseif language == 'java'
elseif language == 'javascript'
  """ HTML
  NeoBundle 'mattn/emmet-vim'
  NeoBundle 'othree/html5.vim'
  """ JavaScript
  " NeoBundle 'pangloss/vim-javascript'
  NeoBundle 'jelera/vim-javascript-syntax'
  NeoBundle 'mattn/jscomplete-vim'
  NeoBundle 'myhere/vim-nodejs-complete'
  NeoBundle 'jiangmiao/simple-javascript-indenter'
  NeoBundle 'Chiel92/vim-autoformat'
elseif language == 'markdown'
  """ Markdown
  " http://rcmdnk.github.io/blog/2014/10/30/computer-vim-markdown/
  NeoBundle 'godlygeek/tabular'
  NeoBundle 'joker1007/vim-markdown-quote-syntax'
  NeoBundle 'rcmdnk/vim-markdown'
  NeoBundle 'iwataka/vim-markdown-ex'
  "NeoBundle 'kannokanno/previm'
  NeoBundle 'kazuph/previm', 'feature/add-plantuml-plugin'
  NeoBundle 'tyru/open-browser.vim'
elseif language == 'org'
  NeoBundle 'jceb/vim-orgmode'
  "NeoBundle 'akstrfn/vim-orgmode'
  NeoBundle 'tpope/vim-speeddating'
elseif language == 'ruby'
  NeoBundle 'vim-ruby/vim-ruby'
elseif language == 'tidal'
  NeoBundle 'munshkr/vim-tidal'
elseif language == 'typescript'
  """ typescript
  NeoBundle 'Quramy/tsuquyomi'
  NeoBundle 'leafgarland/typescript-vim'
  NeoBundle 'jason0x43/vim-js-indent'
  """ Matchit
  " typescript関連のライブラリで必要なようである
  NeoBundle 'tmhedberg/matchit'
endif

call neobundle#end()

" Required:
filetype plugin indent on


" 未インストールのプラグインがある場合、インストールするかどうか
" 尋ねてくれるように設定
" 毎回聞かれると邪魔な場合があるので、この設定は任意
NeoBundleCheck

" ----------------------------------------
" END Neobundle
" ----------------------------------------

" ----------------------------------------
" START OrigMethod
" ----------------------------------------
"  How2use
"    :'<,'>call IPA2kana()
"    :%call IPA2kana()
"
function! IPA2kana()
  let line = getline('.')
  let line = substitute(line, 'a', 'ア', 'g')
  let line = substitute(line, 'i', 'イ', 'g')
  let line = substitute(line, 'u', 'ウ', 'g')
  let line = substitute(line, 'e', 'エ', 'g')
  let line = substitute(line, 'o', 'オ', 'g')
  call setline('.', printf("%s", line))
endfunction

" ----------------------------------------
" End OrigMethod
" ----------------------------------------

