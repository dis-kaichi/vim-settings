""" 共通設定読み込み
let language = 'cpp'
let s:common_vimrc = expand('~/my/config/vimrc_common')
if filereadable(s:common_vimrc)
  execute 'source ' . s:common_vimrc
endif

" 実行コマンド
nnoremap [Exec] <Nop>
nmap <C-t> [Exec]

" g++-7 : C17対応バージョン
map <silent> [Exec]C :!g++-7 -o %:r % -std=c++17<CR>
map <silent> [Exec]c :QuickRun -type cppcompile<CR>
map <silent> [Exec]P :!./%:r<CR>
map <silent> [Exec]p :QuickRun -type execution<CR>
map <silent> = <Plug>(operator-clang-format)
map <silent> [Exec]T :!oj test -c ./%:r<CR>
map <silent> [Exec]q :QuickRun<CR>
map <silent> [Exec]t :QuickRun -type ojtest<CR>

nnoremap <expr><silent> <C-c> quickrun#is_running() ? quickrun#sweep_sessions() : "\<C-c>"

map <silent> [Exec]qq :!qmake<CR>
map <silent> [Exec]qm :!make<CR>
map <silent> [Exec]qp :!./%:p:h:t<CR>

"let output_fname = expand("%:r") . ".exe"
let s:output_fname = expand("%:r") . ".exe"
"map <silent> [Exec]mc :!i686-w64-mingw32-g++ % -o %:r . ".exe"<CR>
map <silent> [Exec]mc :!i686-w64-mingw32-g++ % -o "%:r"".exe"<CR>
map <silent> [Exec]mm :!make<CR>
map <silent> [Exec]mp :!wine "%:r"".exe"<CR>

" QuickRunの設定
"" 改行する場合は'\'が必須
let g:quickrun_config = {}
let g:quickrun_config._ = { "runner" : "vimproc", "runner/vimproc/updatetime" : 60, "outputter/buffer/split" : ":botright", "outputter/buffer/close_on_empty" : 1 }
let g:quickrun_config.ojtest = { 'exec': 'oj test -c ./' . expand('%:r') }
let g:quickrun_config.cppcompile = { 'exec': 'g++-7 -o '. expand('%:r') . ' ' . expand('%') . ' -std=c++17' }
let g:quickrun_config.execution = { 'exec': './' . expand('%:r') }

"タブ文字の長さ
setlocal tabstop=2
setlocal shiftwidth=2

" 括弧を構成する設定に <> を追加する
" template<> を多用するのであれば
setlocal matchpairs+=<:>

setlocal formatoptions-=ro

" 自動フォーマット
""" スタイルは次URLを参照 : https://clang.llvm.org/docs/ClangFormatStyleOptions.html
let g:clang_format#style_options = {
    \ "BasedOnStyle" : "LLVM",
    \ }
let g:clang_format#detect_style_file=1
autocmd FileType c,cpp,h,hpp ClangFormatAutoEnable

" テンプレート
autocmd BufNewFile procon.cpp 0r ~/my/templates/procon_cpp_skelton.cpp
