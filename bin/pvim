#!/usr/bin/env python
# coding: utf-8
import argparse
import os

def _create_parser():  # Parserの作成
    parser = argparse.ArgumentParser()
    parser.add_argument('-c', '--config', help='Config file.(.vimrc)')
    parser.add_argument('-d', '--debug', action='store_true', help='Debug') # Flag
    parser.add_argument('-s', '--script', help='Script Style')
    parser.add_argument('files', nargs='*', default=[], help='Files to open.')
    # Option追加
    for dic in _create_options():
        parser.add_argument(
            '-%s' % (dic.get('short')),
            '--%s' % (dic.get('type')),
            action=dic.get('action'),
            help=dic.get('help'))
    return parser


def _create_options():
    # Optionの生成
    return [
        # specifyは何か特別な条件があれば利用する
        dict(
            short='hatena', type='hatenablog', action='store_true',
            help="HatenaBlog Mode", specify=False),
        dict(
            short='tidal', type='tidal', action='store_true',
            help="Tidal Mode", specify=False),
        dict(
            short='n', type='neovim', action='store_true',
            help="Neovim Mode", specify=False),
    ]

def _generate_config_fname(_type):
    # 引数のタイプからConfigファイル名を生成する
    if _type == "js":
        return "vimrc_js"
    elif _type in ["clj", "cljs"]:
        return "vimrc_clojure"
    elif _type == "hs":
        return "vimrc_haskell"
    elif _type == "py":
        return "vimrc_python"
    elif _type in ["ts", "mts", "tsx"]:
        return "vimrc_typescript"
    elif _type == "fr":
        return "vimrc_frege"
    elif _type == "hy":
        return "vimrc_hylang"
    elif _type in ["cl", "lisp"]:
        return "vimrc_lisp"
    elif _type == "hatena":
        return "vimrc_hatenablog"
    elif _type == "v":
        return "vimrc_coq"
    elif _type in ["md", "markdown"]:
        return "vimrc_markdown"
    elif _type in ["tidal"]:
        return "vimrc_tidal"
    elif _type in ["c", "cpp", "h", "hpp"]:
        return "vimrc_cpp"
    elif _type in ["fs", "fsx"]:
        return "vimrc_fsharp"
    elif _type == "org":
        return "vimrc_org"
    elif _type == "java":
        return "vimrc_java"
    elif _type == "dart":
        return "vimrc_dart"
    elif _type == "todo":
        return "vimrc_todo"
    elif _type == "s":
        return "vimrc_asm"
    elif _type == "rb":
        return "vimrc_ruby"
    elif _type == "lua":
        return "vimrc_lua"
    elif _type == "sql":
        return "vimrc_sql"
    # 不明な場合はpythonのやつ
    print("(WARN) Unknown file extension")
    print("(MSG) Use python config.")
    return "vimrc_python"

def _extract_extension(filename):
    u"""
    ファイル名より拡張子を取得する
    """
    _, ext = os.path.splitext(filename)
    if ext != "":
        ext = ext[1:]  # "."(dot)を除外
        return ext


def _with_config_dir(name):
    # Configファイル格納フォルダへのパスを附与する
    return "~/my/config/{0}".format(name)

if __name__ == '__main__':
    parser = _create_parser()
    args = parser.parse_args()

    # 引数のファイル群取得
    if not args.files:  # ファイルが存在しない
        files = ''
    else:
        files = " ".join(args.files)

    if args.config is None:
        if args.files:
            # 例外(todo.txt)
            if args.files[0] == "todo.txt":
                _type = "todo"
            else:
                # 先頭ファイルの拡張子より利用するConfigファイルを判定する
                _type = _extract_extension(args.files[0])
        elif args.hatenablog:
            _type = "hatena"
        elif args.tidal:
            _type = "tidal"
        else:
            # ファイルがない場合はDefault設定
            _type = None
        config = _with_config_dir(_generate_config_fname(_type))
    else:
        # 直接指定がある場合は引数のconfigを利用する
        config = args.config

    # 起動
    editor = 'nvim' if args.neovim is not None else 'vim'
    if args.script is not None:
        os.system('%s -u %s -s %s %s' % (editor, config, args.script, files))
    elif args.debug:
        os.system('%s -u %s %s --startuptime pvim-debug.log -V9pvim-verbose.log ' % (editor, config, files))
    else:
        os.system('%s -u %s %s' % (editor, config, files))
